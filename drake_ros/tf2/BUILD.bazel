# Copyright 2022 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@ros2//:ros_cc.bzl", "ros_cc_test")
load("@ros2//:ros_py.bzl", "ros_py_test")
load(
    "@drake//tools/skylark:pybind.bzl",
    "pybind_py_library",
)

PYBIND_EXCLUDES = [
    "**/*_py.cc",
    "**/*_pybind.h",
]

# TODO(sloretz) more granular targets for static linking
cc_library(
    name = "drake_ros_tf2",
    srcs = glob(
        [
            "src/*.cc",
            "src/*.h",
        ],
        exclude = PYBIND_EXCLUDES,
    ),
    hdrs = glob(
        ["include/**/*.h"],
        exclude = PYBIND_EXCLUDES,
    ),
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
    deps = [
        "@drake//geometry:scene_graph_inspector",
        "@drake//multibody/plant",
        "@drake_ros_core",
        "@ros2//:geometry_msgs_cc",
        "@ros2//:rclcpp_cc",
        "@ros2//:tf2_ros_cc",
    ],
)

ros_cc_test(
    name = "test_tf_broadcaster",
    size = "small",
    srcs = ["test/test_tf_broadcaster.cc"],
    rmw_implementation = "rmw_cyclonedds_cpp",
    deps = [
        ":drake_ros_tf2",
        "@com_google_googletest//:gtest_main",
        "@drake//common",
        "@drake//systems/primitives",
        "@ros2//:geometry_msgs_cc",
        "@ros2//:rclcpp_cc",
        "@ros2//:tf2_ros_cc",
        "@ros2//resources/rmw_isolation:rmw_isolation_cc",
    ],
)

cc_library(
    name = "python_bindings_internal_hdrs",
    hdrs = glob(["include/**/*_pybind.h"]),
    strip_include_prefix = "include/",
)

pybind_py_library(
    name = "drake_ros_tf2_py",
    cc_deps = [
        # TODO(sloretz) - depend on a shared library target
        # This links statically, and so can lead to ODR violations if the
        # python and C++ libraries are depended upon by the same python target.
        ":drake_ros_tf2",
        ":python_bindings_internal_hdrs",
    ],
    cc_so_name = "drake_ros_tf2",
    cc_srcs = glob(["src/**/*_py.cc"]),
    py_deps = [
        "@drake_ros_core//:drake_ros_core_py",
    ],
    py_imports = ["src"],
    py_srcs = glob(["src/drake_ros_tf2/**/*.py"]),
    visibility = ["//visibility:public"],
)

ros_py_test(
    name = "test_tf_broadcaster_py",
    srcs = ["test/test_tf_broadcaster.py"],
    legacy_create_init = False,
    main = "test/test_tf_broadcaster.py",
    deps = [
        ":drake_ros_tf2_py",
        "@drake//bindings/pydrake",
        "@ros2//:rclpy_py",
        "@ros2//:tf2_ros_py_py",
        "@ros2//resources/rmw_isolation:rmw_isolation_py",
    ],
)
