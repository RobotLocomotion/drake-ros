module(name = "ros2_example_bazel_installed")

bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "rules_python", version = "1.5.1")

DRAKE_COMMIT = "v1.43.0"

DRAKE_CHECKSUM = (
    "635c125187c6758b1bfc7698b59f6f9bfc64a902575e191cccce74be8c6f47ee"
)

bazel_dep(name = "drake")
archive_override(
    module_name = "drake",
    sha256 = DRAKE_CHECKSUM,
    strip_prefix = "drake-{}".format(DRAKE_COMMIT.lstrip("v")),
    urls = [x.format(DRAKE_COMMIT) for x in [
        "https://github.com/RobotLocomotion/drake/archive/{}.tar.gz",
    ]],
)

drake_dep_repositories = use_extension(
    "@drake//tools/workspace:default.bzl",
    "drake_dep_repositories",
)
use_repo(drake_dep_repositories, "pycodestyle", "styleguide")

bazel_dep(name = "bazel_ros2_rules")
local_path_override(
    module_name = "bazel_ros2_rules",
    path = "../bazel_ros2_rules",
)

# Please keep this list sorted
ROS_REQUIRED_PACKAGES = [
    "console_bridge_vendor",
    "rclcpp",
    "rclcpp_action",
    "rclpy",
    "rosbag2",
    "ros2bag_mcap_cli",
    "ros2bag_sqlite3_cli",
    "tf2_py",
] + [
    # These are possible RMW implementations. Uncomment one and only one to
    # change implementations
    "rmw_cyclonedds_cpp",
    # "rmw_fastrtps_cpp",
]

local_ros2 = use_extension(
    "@bazel_ros2_rules//lib:extensions.bzl",
    "local_ros2",
)
local_ros2.distribution(
    include_packages = ROS_REQUIRED_PACKAGES,
)
use_repo(local_ros2, ros2 = "local_ros2")

local_runtime_repo = use_repo_rule(
    "@rules_python//python/local_toolchains:repos.bzl",
    "local_runtime_repo",
)

local_runtime_toolchains_repo = use_repo_rule(
    "@rules_python//python/local_toolchains:repos.bzl",
    "local_runtime_toolchains_repo",
)

local_runtime_repo(
    name = "local_python3",
    interpreter_path = "python3",
    on_failure = "fail",
)

local_runtime_toolchains_repo(
    name = "local_toolchains",
    runtimes = ["local_python3"],
)

register_toolchains("@local_toolchains//:all")
